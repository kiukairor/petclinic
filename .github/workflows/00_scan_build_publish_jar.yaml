name: Scan, Build and Publish Jar

on:
  push:
    branches: [main]
    paths:
      - 'pom.xml'
      - 'src/**'
      - '.github/workflows/00_scan_build_publish_jar.yaml'

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  BUILD_NAME: ${{ github.workflow }} 
  BUILD_NUMBER: ${{ github.run_number }}  

jobs:
  dummy-check:
    runs-on: ubuntu-latest
    steps:
      - name: Dummy check
        run: |
          echo "This is a dummy job to ensure the workflow runs on push events."
          echo $BUILD_NAME
          echo $BUILD_NUMBER
  # static-security:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up jf cli (xray scans)
  #       uses: jfrog/setup-jfrog-cli@v4
  #       env:
  #           JF_URL: https://trial3sr477.jfrog.io 
  #       with:
  #           oidc-provider-name: github-jfrog 
  #           oidc-audience: my-aud
  #           version: 2.75.0
      
  #     - name: Generate settings.xml dynamically
  #       run: |
  #         mkdir -p ~/.m2
  #         envsubst < .github/param-settings.xml > ~/.m2/settings.xml
  #       env:
  #         ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  #         ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

      # Non-blocking. Commented out as too slow for tests
      # - name: Code Quality Checks 1
      #   run: ./mvnw checkstyle:checkstyle

      # - name: Code Quality checks 2
      #   run: ./mvnw spotbugs:check


      # Blocking if too many High vulnerabilities
      ##==========>> Watches are may be meant to do this but nee to check further
      # - name: security checks
      #   run: |
      #     echo "|> Counting vulnerabilities before building... "
      #     jf audit  --format table --min-severity Medium > table.txt 
      #     vuln=$(cat table.txt | grep -E 'High|Critical' | tr -d ' ' |wc -l)        

      #     if [ "$vuln" -gt 10 ]; then
      #       echo "Static analysis found too many High/Critical vulnerabilities($vuln vulnerabilities)"
      #       echo "Aborting build workflow..."
      #       exit 1
      #     fi
      #     echo "Static analysis found $vuln High/Critical vulnerabilities. Proceeding with build."               


####################################################################

  maven-build: 
    # needs: static-security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Generate settings.xml dynamically
        run: |
          mkdir -p ~/.m2
          envsubst < .github/param-settings.xml > ~/.m2/settings.xml
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}


      # Run static checks before building
      - name: Clean project
        run: ./mvnw clean

      - name: Verify (build, test, package, integration tests)
        run: ./mvnw verify
        
      # - name: Check Jar creation  
      #   run: |
      #     echo "Checking if JAR file was created..."
      #     ls -l target/
      #     ls -l
      #     if [ ! -f target/*.jar ]; then
      #       echo "No JAR file found in target directory. Aborting build step."
      #       exit 1
      #     else
      #       echo "JAR file found in target directory."
      #     fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: target/*.jar

# I merged step build and publish to benefit the git commit and build number in the JFrog Artifactory.
  # publish:
  #   runs-on: ubuntu-latest
    # needs: maven-build
    # steps:
    #   - name: Download built artifact
    #     uses: actions/download-artifact@v4
    #     with:
    #       name: app-artifact
    #       path: target/

    



      # - name: check files
      #   run: |
      #     echo "Checking files in target directory..."
      #     ls -l
      #     ls -l target/
      #     if [ ! -f target/*.jar ]; then
      #       echo "No JAR file found in target directory. Aborting publish step."
      #       exit 1
      #     fi    
      - name: Set up jf cli
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: 2.75.0
          oidc-provider-name: github-jfrog
          oidc-audience: my-aud

      - name: publish to JFrog Artifactory
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://trial3sr477.jfrog.io
        with:
          oidc-provider-name: github-jfrog
          oidc-audience: my-aud
      
      - name: Collect environment and git info
        run: |
          jf rt build-collect-env
          jf rt build-add-git    

      - name: Upload to Artifactory  
        run: jf rt upload --url="$JF_URL" "target/*.jar" "my-repo-libs-snapshot-local/"

      - name: Publish build info
        run: |
          jf rt build-publish 
          jf bs "$BUILD_NAME" "$BUILD_NUMBER"


# EXAMPLE on jfrog github.
#     - if: always()
#       name: Build & Deploy
#       run: | 
#         cd maths && jf mvn clean install
        
#     - if: always() 
#       name: Publish Build Information
#       run: |
#         # Collect environment variables for the build
#         jf rt bce
#         # Collect VCS details from git and add them to the build
#         jf rt bag
#         # Publish build info
#         jf rt bp       
        
#     - if: always()
#       name: Xray Scan
#       run: |
#         jf bs